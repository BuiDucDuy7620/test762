{"ast":null,"code":"var _jsxFileName = \"D:\\\\Remote\\\\gull-admin\\\\react\\\\src\\\\app\\\\views\\\\app\\\\calendar\\\\AppCalendar.jsx\";\nimport React, { Component } from \"react\";\nimport { Breadcrumb } from \"@gull\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\"; // needed for dayClick\n\nimport { getAllEvents, addNewEvent, updateEvent, deleteEvent } from \"./CalendarService\";\nimport shortid from \"shortid\";\nimport CalendarEventDialog from \"./CalendarEventDialog\";\n\nclass AppCalendar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.calendarComponentRef = React.createRef();\n    this.state = {\n      eventDialogOpen: false,\n      calendarEvents: [],\n      eventObject: {},\n      newEventInput: \"\",\n      deleteEventOnDrop: false,\n      externalEvents: [// { title: \"Hello world\" },\n        // { title: \"Payment schedule\" },\n        // { title: \"Go to shopping\" },\n        // { title: \"Rend due\" },\n        // { title: \"Car rent\" },\n      ]\n    };\n\n    this.toggleWeekends = () => {\n      this.setState({\n        calendarWeekends: !this.state.calendarWeekends\n      });\n    };\n\n    this.gotoPast = () => {\n      let calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.gotoDate(\"2000-01-01\"); // call a method on the Calendar object\n    };\n\n    this.handleDateClick = arg => {\n      // prompt(\"Please enter a new title for your event\");\n      this.setState({\n        eventDialogOpen: true,\n        eventObject: {\n          title: \"\",\n          start: arg.date,\n          allDay: arg.allDay,\n          classNames: [\"text-white\"]\n        }\n      });\n    };\n\n    this.handleEventDrop = async ({\n      event: {\n        id,\n        start,\n        end,\n        title,\n        allDay,\n        classNames,\n        backgroundColor,\n        extendedProps\n      }\n    }) => {\n      let {\n        data: eventList\n      } = await updateEvent({\n        id,\n        start,\n        end,\n        title,\n        allDay,\n        classNames,\n        color: backgroundColor\n      });\n      this.refreshFullCalendar(eventList);\n    };\n\n    this.handleExternalEventDrop = event => {\n      let {\n        date: start,\n        allDay,\n        draggedEl: {\n          innerText: title,\n          classList: {\n            value: classNames\n          }\n        }\n      } = event;\n      this.handleEventDialogSubmit({\n        start,\n        title,\n        allDay,\n        classNames: classNames.concat(\" text-white\")\n      });\n      let {\n        externalEvents = [],\n        deleteEventOnDrop\n      } = this.state;\n      if (!deleteEventOnDrop) return;\n      this.setState({\n        externalEvents: externalEvents.filter(item => !item.title.match(title))\n      });\n    };\n\n    this.handleDeleteEvent = async id => {\n      if (!id) return;\n      let {\n        data: eventList\n      } = await deleteEvent({\n        id\n      });\n      this.refreshFullCalendar(eventList);\n    };\n\n    this.toggleEventDialog = () => {\n      this.setState({\n        eventDialogOpen: !this.state.eventDialogOpen\n      });\n    };\n\n    this.handleEventDialogSubmit = async eventObject => {\n      let eventList = [];\n\n      if (eventObject.id) {\n        let {\n          data\n        } = await updateEvent(eventObject);\n        eventList = data;\n      } else {\n        let {\n          data\n        } = await addNewEvent(eventObject);\n        eventList = data;\n      }\n\n      this.refreshFullCalendar(eventList);\n    };\n\n    this.handleEventClick = ({\n      event: {\n        id,\n        start,\n        end,\n        title,\n        allDay,\n        classNames,\n        backgroundColor,\n        extendedProps\n      }\n    }) => {\n      this.setState({\n        eventDialogOpen: true,\n        eventObject: {\n          id,\n          title,\n          start,\n          end,\n          allDay,\n          classNames,\n          color: backgroundColor\n        }\n      });\n    };\n\n    this.handleChange = event => {\n      let title = event.target.value;\n\n      if (event.key === \"Enter\") {\n        title = title.trim();\n\n        if (title !== \"\") {\n          this.setState({\n            externalEvents: [...this.state.externalEvents, {\n              title\n            }],\n            newEventInput: \"\"\n          });\n        }\n      } else {\n        this.setState({\n          newEventInput: title\n        });\n      }\n    };\n\n    this.refreshFullCalendar = (eventList = []) => {\n      this.setState({\n        calendarEvents: eventList.map(e => ({\n          start: e.start,\n          title: e.title,\n          id: e.id,\n          end: e.end,\n          classNames: e.classNames,\n          color: e.color,\n          allDay: e.allDay\n        })),\n        eventDialogOpen: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    getAllEvents().then(({\n      data\n    }) => {\n      if (this.state) this.setState({\n        calendarEvents: data\n      });\n    }); // let draggableEl = this.externalEventRef.current;\n    // new Draggable(draggableEl, {\n    //   itemSelector: \".fc-event\",\n    //   eventData: function (eventEl) {\n    //     let title = eventEl.innerText;\n    //     let id = shortid.generate();\n    //     let classNames = eventEl.classList.value + \" text-white\";\n    //     // this.handleEventDialogSubmit({\n    //     //   event: { title, classNames, allDay: true }\n    //     // });\n    //     return { title, id, classNames, create: false };\n    //   },\n    // });\n  }\n\n  render() {\n    let {\n      calendarEvents,\n      calendarWeekends,\n      eventDialogOpen,\n      eventObject,\n      newEventInput,\n      deleteEventOnDrop,\n      externalEvents = []\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card mb-4 o-hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      defaultView: \"dayGridMonth\",\n      header: {\n        left: \"prev,next today\",\n        center: \"title\",\n        right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n      },\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      themeSystem: \"bootstrap\",\n      displayEventTime: false,\n      droppable: true,\n      editable: true,\n      eventLimit: true,\n      ref: this.calendarComponentRef,\n      weekends: calendarWeekends,\n      events: calendarEvents,\n      dateClick: this.handleDateClick,\n      eventDrop: this.handleEventDrop,\n      eventResize: this.handleEventDrop,\n      eventClick: this.handleEventClick,\n      drop: this.handleExternalEventDrop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }\n    }))))), /*#__PURE__*/React.createElement(CalendarEventDialog, {\n      open: eventDialogOpen,\n      closeDialog: this.toggleEventDialog,\n      handleSubmit: this.handleEventDialogSubmit,\n      eventObject: eventObject,\n      handleDeleteEvent: this.handleDeleteEvent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default AppCalendar;","map":{"version":3,"sources":["D:/Remote/gull-admin/react/src/app/views/app/calendar/AppCalendar.jsx"],"names":["React","Component","Breadcrumb","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Draggable","getAllEvents","addNewEvent","updateEvent","deleteEvent","shortid","CalendarEventDialog","AppCalendar","calendarComponentRef","createRef","state","eventDialogOpen","calendarEvents","eventObject","newEventInput","deleteEventOnDrop","externalEvents","toggleWeekends","setState","calendarWeekends","gotoPast","calendarApi","current","getApi","gotoDate","handleDateClick","arg","title","start","date","allDay","classNames","handleEventDrop","event","id","end","backgroundColor","extendedProps","data","eventList","color","refreshFullCalendar","handleExternalEventDrop","draggedEl","innerText","classList","value","handleEventDialogSubmit","concat","filter","item","match","handleDeleteEvent","toggleEventDialog","handleEventClick","handleChange","target","key","trim","map","e","componentDidMount","then","render","left","center","right"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Breadcrumb } from \"@gull\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\"; // needed for dayClick\nimport {\n  getAllEvents,\n  addNewEvent,\n  updateEvent,\n  deleteEvent,\n} from \"./CalendarService\";\nimport shortid from \"shortid\";\nimport CalendarEventDialog from \"./CalendarEventDialog\";\n\nclass AppCalendar extends Component {\n  calendarComponentRef = React.createRef();\n  // externalEventRef = React.createRef();\n\n  state = {\n    eventDialogOpen: false,\n    calendarEvents: [],\n    eventObject: {},\n    newEventInput: \"\",\n    deleteEventOnDrop: false,\n    externalEvents: [\n      // { title: \"Hello world\" },\n      // { title: \"Payment schedule\" },\n      // { title: \"Go to shopping\" },\n      // { title: \"Rend due\" },\n      // { title: \"Car rent\" },\n    ],\n  };\n\n  toggleWeekends = () => {\n    this.setState({\n      calendarWeekends: !this.state.calendarWeekends,\n    });\n  };\n\n  gotoPast = () => {\n    let calendarApi = this.calendarComponentRef.current.getApi();\n    calendarApi.gotoDate(\"2000-01-01\"); // call a method on the Calendar object\n  };\n\n  handleDateClick = (arg) => {\n    // prompt(\"Please enter a new title for your event\");\n    this.setState({\n      eventDialogOpen: true,\n      eventObject: {\n        title: \"\",\n        start: arg.date,\n        allDay: arg.allDay,\n        classNames: [\"text-white\"],\n      },\n    });\n  };\n\n  handleEventDrop = async ({\n    event: {\n      id,\n      start,\n      end,\n      title,\n      allDay,\n      classNames,\n      backgroundColor,\n      extendedProps,\n    },\n  }) => {\n    let { data: eventList } = await updateEvent({\n      id,\n      start,\n      end,\n      title,\n      allDay,\n      classNames,\n      color: backgroundColor,\n    });\n\n    this.refreshFullCalendar(eventList);\n  };\n\n  handleExternalEventDrop = (event) => {\n    let {\n      date: start,\n      allDay,\n      draggedEl: {\n        innerText: title,\n        classList: { value: classNames },\n      },\n    } = event;\n\n    this.handleEventDialogSubmit({\n      start,\n      title,\n      allDay,\n      classNames: classNames.concat(\" text-white\"),\n    });\n\n    let { externalEvents = [], deleteEventOnDrop } = this.state;\n\n    if (!deleteEventOnDrop) return;\n\n    this.setState({\n      externalEvents: externalEvents.filter((item) => !item.title.match(title)),\n    });\n  };\n\n  handleDeleteEvent = async (id) => {\n    if (!id) return;\n    let { data: eventList } = await deleteEvent({ id });\n    this.refreshFullCalendar(eventList);\n  };\n\n  toggleEventDialog = () => {\n    this.setState({ eventDialogOpen: !this.state.eventDialogOpen });\n  };\n\n  handleEventDialogSubmit = async (eventObject) => {\n    let eventList = [];\n    if (eventObject.id) {\n      let { data } = await updateEvent(eventObject);\n      eventList = data;\n    } else {\n      let { data } = await addNewEvent(eventObject);\n      eventList = data;\n    }\n\n    this.refreshFullCalendar(eventList);\n  };\n\n  handleEventClick = ({\n    event: {\n      id,\n      start,\n      end,\n      title,\n      allDay,\n      classNames,\n      backgroundColor,\n      extendedProps,\n    },\n  }) => {\n    this.setState({\n      eventDialogOpen: true,\n      eventObject: {\n        id,\n        title,\n        start,\n        end,\n        allDay,\n        classNames,\n        color: backgroundColor,\n      },\n    });\n  };\n\n  handleChange = (event) => {\n    let title = event.target.value;\n    if (event.key === \"Enter\") {\n      title = title.trim();\n      if (title !== \"\") {\n        this.setState({\n          externalEvents: [...this.state.externalEvents, { title }],\n          newEventInput: \"\",\n        });\n      }\n    } else {\n      this.setState({ newEventInput: title });\n    }\n  };\n\n  refreshFullCalendar = (eventList = []) => {\n    this.setState({\n      calendarEvents: eventList.map((e) => ({\n        start: e.start,\n        title: e.title,\n        id: e.id,\n        end: e.end,\n        classNames: e.classNames,\n        color: e.color,\n        allDay: e.allDay,\n      })),\n      eventDialogOpen: false,\n    });\n  };\n\n  componentDidMount() {\n    getAllEvents().then(({ data }) => {\n      if (this.state) this.setState({ calendarEvents: data });\n    });\n\n    // let draggableEl = this.externalEventRef.current;\n    // new Draggable(draggableEl, {\n    //   itemSelector: \".fc-event\",\n    //   eventData: function (eventEl) {\n    //     let title = eventEl.innerText;\n    //     let id = shortid.generate();\n    //     let classNames = eventEl.classList.value + \" text-white\";\n    //     // this.handleEventDialogSubmit({\n    //     //   event: { title, classNames, allDay: true }\n    //     // });\n    //     return { title, id, classNames, create: false };\n    //   },\n    // });\n  }\n\n  render() {\n    let {\n      calendarEvents,\n      calendarWeekends,\n      eventDialogOpen,\n      eventObject,\n      newEventInput,\n      deleteEventOnDrop,\n      externalEvents = [],\n    } = this.state;\n\n    return (\n      <div>\n        {/* <Breadcrumb\n          routeSegments={[{ name: \"Home\", path: \"/\" }, { name: \"Calendar\" }]}\n        ></Breadcrumb> */}\n\n        <div className=\"row\">\n          {/* <div className=\"col-md-3\">\n            <div className=\"card mb-4\">\n              <div className=\"card-body\">\n                <div className=\"create_event_wrap\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"newEvent\"> Create new Event</label>\n                    <input\n                      type=\"text\"\n                      name=\"newEvent\"\n                      className=\"form-control\"\n                      placeholder=\"new Event\"\n                      value={newEventInput}\n                      onChange={this.handleChange}\n                      onKeyUp={this.handleChange}\n                    />\n                  </div>\n\n                  <ul\n                    className=\"list-group\"\n                    id=\"external-events\"\n                    // ref={this.externalEventRef}\n                  >\n                    {externalEvents.map((event, ind) => (\n                      <li\n                        key={ind}\n                        style={{ backgroundColor: \"#f5f5f5\", color: \"#000000\" }}\n                        className=\"list-group-item  fc-event\"\n                      >\n                        {event.title}\n                      </li>\n                    ))}\n                  </ul>\n                  <p>\n                    <label className=\"checkbox checkbox-primary\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"agree\"\n                        value={deleteEventOnDrop}\n                        checked={deleteEventOnDrop}\n                        onChange={(e) =>\n                          this.setState({ deleteEventOnDrop: e.target.checked })\n                        }\n                      />\n                      <span>Remove after drop</span>\n                      <span className=\"checkmark\"></span>\n                    </label>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div> */}\n          <div className=\"col-md-12\">\n            <div className=\"card mb-4 o-hidden\">\n              <div className=\"card-body\">\n                <FullCalendar\n                  defaultView=\"dayGridMonth\"\n                  header={{\n                    left: \"prev,next today\",\n                    center: \"title\",\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\",\n                  }}\n                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                  themeSystem=\"bootstrap\"\n                  displayEventTime={false}\n                  droppable={true}\n                  editable={true}\n                  eventLimit={true}\n                  ref={this.calendarComponentRef}\n                  weekends={calendarWeekends}\n                  events={calendarEvents}\n                  dateClick={this.handleDateClick}\n                  eventDrop={this.handleEventDrop}\n                  eventResize={this.handleEventDrop}\n                  eventClick={this.handleEventClick}\n                  drop={this.handleExternalEventDrop}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <CalendarEventDialog\n          open={eventDialogOpen}\n          closeDialog={this.toggleEventDialog}\n          handleSubmit={this.handleEventDialogSubmit}\n          eventObject={eventObject}\n          handleDeleteEvent={this.handleDeleteEvent}\n        ></CalendarEventDialog>\n      </div>\n    );\n  }\n}\n\nexport default AppCalendar;\n"]},"metadata":{},"sourceType":"module"}