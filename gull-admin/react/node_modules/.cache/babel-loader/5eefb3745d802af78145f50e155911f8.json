{"ast":null,"code":"var _jsxFileName = \"D:\\\\Remote\\\\gull-admin\\\\react\\\\src\\\\app\\\\GullLayout\\\\SharedComponents\\\\Customizer.jsx\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { merge } from \"lodash\";\nimport { setLayoutSettings, setDefaultSettings } from \"app/redux/actions/LayoutActions\";\nimport { classList } from \"@utils\";\nimport ScrollBar from \"react-perfect-scrollbar\";\n\nclass Customizer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n    this.sidebarColors = [{\n      name: \"gradient-purple-indigo\"\n    }, {\n      name: \"gradient-black-blue\"\n    }, {\n      name: \"gradient-black-gray\"\n    }, {\n      name: \"gradient-steel-gray\"\n    }, {\n      name: \"dark-purple\"\n    }, {\n      name: \"slate-gray\"\n    }, {\n      name: \"midnight-blue\"\n    }, {\n      name: \"blue\"\n    }, {\n      name: \"indigo\"\n    }, {\n      name: \"pink\"\n    }, {\n      name: \"red\"\n    }, {\n      name: \"purple\"\n    }];\n\n    this.handleLayoutChange = layoutName => {\n      let {\n        settings,\n        setLayoutSettings\n      } = this.props;\n      setLayoutSettings(merge({}, settings, {\n        activeLayout: layoutName\n      }));\n    };\n\n    this.handleCustomizerToggle = () => {\n      let {\n        settings,\n        setLayoutSettings\n      } = this.props;\n      setLayoutSettings(merge({}, settings, {\n        customizer: {\n          open: !settings.customizer.open\n        }\n      }));\n    };\n\n    this.handleDirectionChange = event => {\n      let {\n        settings,\n        setLayoutSettings\n      } = this.props;\n      let dir = settings.dir === \"rtl\" ? \"ltr\" : \"rtl\";\n      document.documentElement.setAttribute(\"dir\", dir);\n      setLayoutSettings(merge({}, settings, {\n        dir: dir\n      }));\n    };\n\n    this.changeSidebarColor = colorClass => {\n      let {\n        settings,\n        setLayoutSettings\n      } = this.props;\n      setLayoutSettings(merge({}, settings, {\n        layout2Settings: {\n          leftSidebar: {\n            theme: colorClass\n          }\n        }\n      }));\n    };\n  }\n\n  render() {\n    let {\n      settings\n    } = this.props;\n    let {\n      activeLayout\n    } = settings;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"customizer\",\n      className: classList({\n        customizer: true,\n        open: settings.customizer.open\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nCustomizer.propTypes = {\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings\n});\n\nexport default connect(mapStateToProps, {\n  setLayoutSettings,\n  setDefaultSettings\n})(Customizer);","map":{"version":3,"sources":["D:/Remote/gull-admin/react/src/app/GullLayout/SharedComponents/Customizer.jsx"],"names":["React","Component","PropTypes","connect","merge","setLayoutSettings","setDefaultSettings","classList","ScrollBar","Customizer","state","sidebarColors","name","handleLayoutChange","layoutName","settings","props","activeLayout","handleCustomizerToggle","customizer","open","handleDirectionChange","event","dir","document","documentElement","setAttribute","changeSidebarColor","colorClass","layout2Settings","leftSidebar","theme","render","propTypes","func","isRequired","object","mapStateToProps","layout"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { merge } from \"lodash\";\nimport {\n  setLayoutSettings,\n  setDefaultSettings\n} from \"app/redux/actions/LayoutActions\";\nimport { classList } from \"@utils\";\nimport ScrollBar from \"react-perfect-scrollbar\";\n\nclass Customizer extends Component {\n  state = {};\n\n  sidebarColors = [\n    {\n      name: \"gradient-purple-indigo\"\n    },\n    {\n      name: \"gradient-black-blue\"\n    },\n    {\n      name: \"gradient-black-gray\"\n    },\n    {\n      name: \"gradient-steel-gray\"\n    },\n    {\n      name: \"dark-purple\"\n    },\n    {\n      name: \"slate-gray\"\n    },\n    {\n      name: \"midnight-blue\"\n    },\n    {\n      name: \"blue\"\n    },\n    {\n      name: \"indigo\"\n    },\n    {\n      name: \"pink\"\n    },\n    {\n      name: \"red\"\n    },\n    {\n      name: \"purple\"\n    }\n  ];\n\n  handleLayoutChange = layoutName => {\n    let { settings, setLayoutSettings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        activeLayout: layoutName\n      })\n    );\n  };\n\n  handleCustomizerToggle = () => {\n    let { settings, setLayoutSettings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        customizer: {\n          open: !settings.customizer.open\n        }\n      })\n    );\n  };\n  handleDirectionChange = event => {\n    let { settings, setLayoutSettings } = this.props;\n    let dir = settings.dir === \"rtl\" ? \"ltr\" : \"rtl\";\n    document.documentElement.setAttribute(\"dir\", dir);\n    setLayoutSettings(\n      merge({}, settings, {\n        dir: dir\n      })\n    );\n  };\n  changeSidebarColor = colorClass => {\n    let { settings, setLayoutSettings } = this.props;\n    setLayoutSettings(\n      merge({}, settings, {\n        layout2Settings: {\n          leftSidebar: {\n            theme: colorClass\n          }\n        }\n      })\n    );\n  };\n\n  render() {\n    let { settings } = this.props;\n    let { activeLayout } = settings;\n\n    return (\n      <div\n        id=\"customizer\"\n        className={classList({\n          customizer: true,\n          open: settings.customizer.open\n        })}\n      >\n        {/* <div className=\"handle\" onClick={this.handleCustomizerToggle}>\n          <i className=\"i-Gear spin\"></i>\n        </div>\n        <ScrollBar\n          className=\"customizer-body\"\n          data-perfect-scrollbar\n          data-suppress-scroll-x=\"true\"\n        >\n          <div className=\"accordion\" id=\"accordionCustomizer\">\n            <div className=\"card\">\n              <div className=\"card-header\" id=\"headingOne\">\n                <p className=\"mb-0\">Sidebar Layout</p>\n              </div>\n\n              <div\n                id=\"collapseOne\"\n                className=\"collapse show\"\n                aria-labelledby=\"headingThree\"\n                data-parent=\"#accordionCustomizer\"\n              >\n                <div className=\"card-body layouts\">\n                  <div\n                    className={classList({\n                      \"layout-box\": true,\n                      active: activeLayout === \"layout1\"\n                    })}\n                    onClick={() => this.handleLayoutChange(\"layout1\")}\n                  >\n                    <img\n                      src=\"/assets/images/screenshots/04_preview.png\"\n                      alt=\"\"\n                    />\n                    <i className=\"i-Eye\"> </i>\n                  </div>\n                  <div\n                    className={classList({\n                      \"layout-box\": true,\n                      active: activeLayout === \"layout2\"\n                    })}\n                    onClick={() => this.handleLayoutChange(\"layout2\")}\n                  >\n                    <img\n                      src=\"/assets/images/screenshots/02_preview.png\"\n                      alt=\"\"\n                    />\n                    <i className=\"i-Eye\"> </i>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {settings.activeLayout === \"layout2\" && (\n              <div className=\"card\">\n                <div className=\"card-header\" id=\"headingOne\">\n                  <p className=\"mb-0\">Sidebar Colors</p>\n                </div>\n\n                <div\n                  id=\"collapseOne\"\n                  className=\"collapse show\"\n                  aria-labelledby=\"headingOne\"\n                  data-parent=\"#accordionCustomizer\"\n                >\n                  <div className=\"card-body\">\n                    <div className=\"colors sidebar-colors\">\n                      {this.sidebarColors.map((c, i) => (\n                        <span\n                          className={`color ${c.name}`}\n                          title={c.name}\n                          onClick={() =>\n                            this.changeSidebarColor(`sidebar-${c.name}`)\n                          }\n                          key={i}\n                        >\n                          <i className=\"i-Eye\"></i>\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"card\">\n              <div className=\"card-header\" id=\"headingOne\">\n                <p className=\"mb-0\">RTL</p>\n              </div>\n\n              <div\n                id=\"collapseTwo\"\n                className=\"collapse show\"\n                aria-labelledby=\"headingTwo\"\n                data-parent=\"#accordionCustomizer\"\n              >\n                <div className=\"card-body\">\n                  <label className=\"checkbox checkbox-primary\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"rtl-checkbox\"\n                      checked={settings.dir === \"rtl\" ? true : false}\n                      onChange={this.handleDirectionChange}\n                    />\n                    <span>Enable RTL</span>\n                    <span className=\"checkmark\"></span>\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"card\">\n              <div className=\"card-header\" id=\"headingThree\">\n                <p className=\"mb-0\">Bootstrap Colors</p>\n              </div>\n\n              <div\n                id=\"collapseThree\"\n                className=\"collapse show\"\n                aria-labelledby=\"headingThree\"\n                data-parent=\"#accordionCustomizer\"\n              >\n                <div className=\"card-body\">\n                  <div className=\"bootstrap-colors colors\">\n                    <span title=\"lite-purple\" className=\"color purple\"></span>\n                    <span title=\"lite-blue\" className=\"color blue\"></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ScrollBar> */}\n      </div>\n    );\n  }\n}\n\nCustomizer.propTypes = {\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  setLayoutSettings: PropTypes.func.isRequired,\n  setDefaultSettings: PropTypes.func.isRequired,\n  settings: state.layout.settings\n});\n\nexport default connect(mapStateToProps, {\n  setLayoutSettings,\n  setDefaultSettings\n})(Customizer);\n"]},"metadata":{},"sourceType":"module"}